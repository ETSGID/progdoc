#!/usr/bin/env node

/**
 * Module dependencies.
 */

/* global PATH_PDF */
require('dotenv').config();

const normalize = require('normalize-path');
const path = require('path');
const debug = require('debug')('progdoc');
const http = require('http');
// variables de contexto
global.PATH_PDF = normalize(process.env.PATH_PDF || '/storage/progdoc/');
// contexto de la aplicacion en el servidor. Lo usa el proxy inverso
global.CONTEXT = normalize(process.env.CONTEXT || '/pdi/progdoc/');
global.DEV = process.env.DEV || 'false';
global.PRUEBAS = process.env.PRUEBAS || 'false';
global.DOCKER = process.env.DOCKER || 'true';

const app = require('../app');
const funciones = require('../funciones');

const ruta = path.join(PATH_PDF, 'pdfs', 'files');
funciones.ensureDirectoryExistence(ruta);
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  // eslint-disable-next-line no-shadow
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
